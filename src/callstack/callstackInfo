
JVM은 프로그램을 수행하는 데 필요한 메모리를 할당받고 용도에 따라 영역을 나누어 관리한다.
(주요 영역 : method area, call stack, heep)
- method area : 클래스에 대한 정보를 저장하는 영역, 프로그램 실행 중 클래스가 사용되면 해당 클래스의 정보와 클래스 변수(static 변수, static메서드)가 저장되는 공간이다.
                ( 클래스 정보 :맴버 변수의 이름, static 변수, 변수 정보(데이터 타입, 접근 제어자 정보), 메서드 정보 등 )
                클래스 변수는 JVM이 동작해서 클래스가 로딩될 때 생성되어 어디서든 접근할 수 있고 프로그램이 종료될 때까지 메모리에 남아 있다.
                클래스 변수는 인스턴스 변수와 저장되는 메모리 영역이 다르기 때문에 static 메서드에서 외부 인스턴스 멤버에 접근할 수 없다.
- call stack : 메서드의 작업에 필요한 메모리 공간을 제공하는 영역, 메서드가 작업하는 동안 임시적으로 사용되는 메서드의 매개변수를 포함한 지역변수와 연산 중간 결과 등을 저장한다.
               참조 변수의 경우 참조값만 저장하는데 이 참조값은 heap 영역에 존재하는 인스턴스(객체)를 가르킨다.
- heep : 프로그램 런타임 시 생성되는 인스턴스 객체와 배열이 저장되는 영역,
         Heap은 참조형의 데이터 객체에 실제 데이터들이 담기는 공간이고, 실제 데이터를 가지고 있는 Heap 영역의 참조값을 Stack 영역의 객체가 가지고 있는 것.
         참조하는 변수나 필드가 없다면 GC(가비지 컬렉터)에 의해 메모리에서 사라지게 된다.

## 호출 스택 ( call stack)

- 메서드 수행에 필요한 메모리가 제공되는 공간으로 stack은 물건을 넣을 때 위로 차곡차곡 쌓이는 밑이 막힌 상자이다.
- 메서드가 호출되면 호출 스택에 메모리가 할당되고 메서드가 작업을 마치면 할당된 메모리 공간은 반환되어 비워진다.
- 호출 스택은 맨 위 하나의 메서드만 실행되고 나머지는 대기 상태이며, 만약 맨 위에 있는 메서드가 반환값이 있는 메서드라면
  메서드의 작업이 끝나면서 자신을 호출했던 바로 밑의 메서드에게 결괏값을 반환한다. 그다음 메서드는 넘겨받은 반환값으로 작업을 처리하며 이를 반복한다.

- ex1 | 호출 스택 과정을 알 수 있다.
