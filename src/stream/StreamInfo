
  ## 스트림 ( Stream )
  다양한 데이터 소스를 표준화된 방법으로 다루기 위해 사용하는 것.
  여러 데이터타입을 다루기 위한 배열 혹은 컬렉션 들이 모두 스트림으로 변환하여 연산처리가 가능하다.
  스트림의 연산은 [ 스트림으로 변환(생성) -> 중간연산 -> 최종연산 ]으로 이뤄진다.
  스트림은 데이터 소스로 부터 읽기만 한다. (Read Only)
  스트림은 Iterator과 같이 일회용으로 필요에 따라 다시 생성해서 사용한다.
  스트림은 최종연산 까지 중간연산이 수행되지 않는 지연 연산이다. (문장을 작성하면 스트림은 수행할 작업을 체크하고 필요에 따라 연산한다.)
  스트림은 작업을 내부 반복으로 처리할 수 있다.
  스트림은 작업을 병렬스트림으로 변환하여 처리할 수 있다. (멀티 쓰레드)
  스트림은 데이터 타입이 기본형인 경우 기본형 스트림을 사용할 수 있다.
     기본형 스트림 [ IntStream  LongStream  DoubleStream ]
        - 오토박싱&언박싱의 비효율이 제거되고 (Stream<Integer>대신 IntStream을 사용한다. (작업 성능 개선)
        - 숫자와 관련된 유용한 메서드를 Stream<T>보다 더 많이 제공하는 장점이 있다.
  스트림은 Collection인터페이스의 Stream()으로 컬렉션을 스트으로 변환할 수 있다.
  스트림은 객체 배열로부터 스트림을 생성할 수 있다.
  스트림은 람다식으로 부터 스트림을 생성할 수 있다.
    iterate() : 이전 요소를 초기값으로 사용해서 다음 요소를 계산한다.
    generaate() : 초기값을 사용하지 않고 스트림을 생성한다.
  스트림은 파일을 소스로 스트림을 생성할 수 있다.
  스트림은 비어있는 스트림을 생성할 수 있다.
 ex1 |스트림을 작성해보자.
 ex2 | 배열로부터 스트림을 생성해보자.
 ex3 | 람다식을 소스로 작성해보자.

   스트림의 연산
    1. 스트림 생성 | 데이터 타입을 스트림으로 변환한다.
    2. 중간 연산 | 연산결과가 스트림인 연산. 여러 번 반복 적용이 가능하다.
                disrinct(), filter(), limit(), skip(), peek(), sorted(), map(), flatMap()
    3. 최종 연산 | 연산결과가 스트림이 아닌 연산. 스트림 요소를 소모하여 데이터를 꺼낸다.
                forEach(), count(), max(), min(), findAny(), findFirst(),
                allMatch(), anyMatch(), noneMatch(), toArray(), reduce(), collect()
 ex4 | 스트림의 연산을 간단히 이용해보자.
 ex5 | 스트림의 연산을 여러 가지 이용해보자.
 ex6 | 여러 문자열의 배열을 하나의 스트림으로 생성해보자.

  ## Optional <T>
  T 타입의 객체의 래퍼클래스이다.
  데이터가 null 값인 경우 이 null값을 직접 다루는 것을 예외를 발생시킬 수 있어 Optinal 객체로 null값을 감싸 null값을 담을 객체주소값을 만들어
  null값을 간접적으로 다루기 위해 사용하며 주로 받으려는 객체가 null값인지 확인할 때 사용한다.
 ex7 | Optional 를 생성해보자.
  OptionalInt, OptionalLong, OptionalDouble
  - 기본형 데이터 타입을 감싸는 래퍼클래스로 빈 Optional객체와 비교할 수 있다.
 ex8 | 기본형의 데이터 타입을 감싸는 Optional을 생성해보자.
