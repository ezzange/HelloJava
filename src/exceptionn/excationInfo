
 java의 런타임 에러

 에러(error) : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
 예외(exception) : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류

 Object
 ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ——
     - Throwable
     ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———
          - Error  심각한 에러
              - Compile-time error : 컴파일 할 때 발생하는 에러 ( 구문 체크(번역) 혹은 최적화 (상수 계산 , 생략된 코드 추가) )
              - Runtime error : 실행할 때 발생하는 에러 ( 프로그램 실행 -> 런타임 에러 발생 -> 프로그램 종료 )
              - Logical error : 프로그램이 종료 되지 않지만 작성 의도와 다르게 동작할 때 발생하는 에러 ( 프로그램 종료 X )
         ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———
         - Exception | checked 예외 ( 컴파일러가 처리 여부를 체크 → 예외처리 필수 )
             - IOException
             - ClassNotFoundException
             ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———
             - RuntimeException | unchecked 예외 ( **컴파일러가 처리 여부를 체크 ❌ → 예외처리 선택 )
                 - ArithmeticException : 0으로 나눌 시 에러
                 - ClassCastException : 형변환 예러
                 - NullPointerException : 참조 변수가 null 일때 메서드를 호출하거나 . 연산자 사용 에러
                 - IndexOutOfBoundsException : 배열 범위 벗어난 에러
                 - …더보기
             ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———
             - …더보기
 ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ———  ——

 ## 예외처리 ( Excetion handling )
- 프로그램 실행 시 발생할 수 있는 예외를 대비해 코드를 작성하여 비정상 종료를 방지하는 것
- catch블럭에서 범위가 좁은 예외부터 선언해야 어떤 예외가 어디서 발생했는지 알 수 있으므로 가장 마지막에  Exception(모든 예외의 부모 클래스)을 선언한다.
- 연산자 new 와 키워드 throw 를 이용하여 예외를 고의적으로 발생시킬 수 있는데 이를 응용하여 사용자 정의 예외를 만들 수 있다.
 예외 객체 : 예외 발생시 예외 객체가 생성되는데 생성된 예외객체에는 발생한 예외정보와 메서드들을
          (printStackTrace(), getMessage(), … 등)가지고 있어 참조변수로  접근해 객체의 예외 정보를 알 수 있다.
- printStackTrace() : 예외 발생 당시의 호출스택 정보와 예외 메시지를 화면에 출력해준다.
- getMessage() : 발생한 예외클래스의 인스턴스(객체)에 저장된 메시지를 얻을 수 있다.

- 메서드에 예외를 선언하면 해당 메서드를 호출한 쪽으로 예외를 떠넘길 수 있다.
- 예외 되던지기 : 예외를 처리하고 예외를 다시 되던저 메서드를 호출한 쪽과 예외를 분담하여 처리할 수 있다. (예외 2번 처리)
- 연결된 예외 : 한 예외는 다른 예외를 발생시키도록 연결할 수 있다. 이를 이용하여 여러 예외를 하나로 묶어서 다룰 수 있다.

 checked 예외  : 컴파일러가 예외처리 여부를 체크 ⇒ Exception과 Exception의 자식 클래스 예외가 발생되고 예외 처리를 하지 않으면 컴파일 에러 발생
               ⇒ 예외 처리 필수
 unchecked 예외  : 컴파일러가 예외처리 여부를 체크안함 ⇒ RuntimException과 RuntimException의 자식클래스 예외가 발생 되어도 컴파일은 실행된다. (컴파일 후 실행 중 에러 발생 )
               ⇒ 예외 처리 선택
-  try catch 구문
    try{
        // 예외를 처리하길 원하는 실행 코드;
    } catch (IOException ioe) {
        //ioe 예외가 발생할 경우에 실행될 코드
    } catch (Exception e ){
        //e 예외가 발생할 경우에 실행될 코드
    } finally {
        //예외 발생 여부와 상관없이 무조건 실행될 코드
    }

- ex1 | 예외를 발생시키거나 예외처리를 작성해볼 수 있다.
- ex2 | try catch 흐름을 알아보자.
- ex3 | 예외를 발생시켜 예외 객체의 정보를 확인해보자.
- ex4 | 메서드에 선언하여 넘겨보자.
- ex5 | 사용자 정의 예외를 만들 수 있다.
- ex6 | 예외를 분담하여 처리해보자
- ex7 | 연결된 예외를 만들어보자.
