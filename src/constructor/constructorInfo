
## 생성자(Constructor)
- 인스턴스 객체가 생성 시 호출되는 인스턴스 초기화 메서드로 iv 초기화를 담당한다.
- 생성자는 클래스 이름으로 되어 있고 반환 타입이 없으며 new 연산자로 호출된다.
- 모든 클래스는 반드시 하나 이상의 생성자를 가져야 하며 생성자가 없는 경우 컴파일러가 매개변수가 없는 기본 생성자를 자동으로 만들어준다.
- 모든 생성자 첫 줄에는 반드시 다른 생성자( this(), super() )를 호출한다. 그렇지 않으면 컴파일 에러가 발생하기 때문에 컴파일 시 컴파일러가 자동으로 넣어 준다.
  => 기본 생성자는 컴파일러가 자동으로 주입해 주는데 기본 생성자가 아닌 다른 생성자를 작성해 줄 때 기본 생성자를 같이 만들어주지 않으면 컴파일 에러 발생
  ( cannot resolve symbol symbol : constructor 해당 클래스명 에러 발생 => 해당 클래스의 이름을 찾을 수 없다. )

- ex1 | 지역변수 LV는 초기화를 하지 않으면 사용할 수 없는 것을 확인해 볼 수 있다.
- ex2 | 기본 생성자와 매개변수가 있는 생성자를 만들어 볼 수 있다.

 생성자 this()
- 매개변수가 있는 생성자의 경우 만약 생성자에서 다른 생성자를 호출할 때 자신의 클래스명이 아닌 this()를 사용하여 인스턴스 변수  초기화 한다.
- ex2 | this()를 이용하여 생성자를 만들어 볼 수 있다.

 생성자 super()
- 자식 클래스의 생성자는 자식 클래스가 선언한 멤버만 선언해야 한다.
- 자식 클래스의 생성자에서 부모 클래스의 멤버를 초기화할 때 부모의 생성자를 호출하여 초기화한다.

- inheritance.ex6 | 자식 클래스에서 생성자 super()를 사용하여 부모 클래스의 멤버를 초기화한다.
  inheritance.ex7 | 생성자 작성 시 첫 줄에 this() 혹은 super() 생성자를 호출하여 작성할 수 있다.

##  참조 변수
- 객체를 가리키기 위해 사용되는 변수로 Java에서 객체는 힙(heap) 메모리에 할당되고, 해당 객체에 접근하려면 참조 변수를 사용한다.
- 참조 변수는 실제로 객체 자체가 아닌, 힙 메모리에 위치한 객체를 가리키는 주솟값을 저장하여 이 주솟값은 객체의 데이터와 메서드에 대한 접근을 가능하다.

 참조 변수 this
- 자신을 가리키는 참조 변수 이다.
- ex2 | 참조 변수 this를 사용하여 매개변수가 있는 생성자를 만들어 볼 수 있다.

 참조 변수 super
- 부모 클래스 가리키는 참조 변수 이다.
- 자식 클래스가 자신의 멤버 이름과 상속받은 부모 클래스의 멤버 이름이 같을 경우, 자신의 멤버는 this. 변수명 부모의 멤버는 super. 변수명으로 구별할 수 있다.
- 만일 부모 클래스에만 존재하는 변수명을 참조 변수 super와 this를 사용하면 상속받은 멤버는 자식 클래스의 멤버이므로 super와 this는 같은 값을 가리킨다.
- 객체 자신을 가리키는 참조 변수로 인스턴스 메서드에 존재하고 static 메서드에는 존재할 수 없다.

## 변수의 초기화
- 멤버 변수 Iv, Cv(인스턴스 변수, 클래스 변수)는 자동 초기화된다.
- Lv(지역 변수)는 같은 메모리 공간에서 스택이 쌓이고 사라지고 반복되기 때문에 사용 전 수동 초기화를 반드시 해주어야 한다.
     ( 재사용이 빈번한 호출 스택은 지역변수 메서드가 호출되는 동안에만 작업하기 때문에 생명주기가 짧은데 메서드가 호출될 때마다
     호출 스택의 메모리 공간을 0으로 초기화를 하면 성능이 떨어지기 진다. 그래서 호출 시 해당 메모리 공간을 0으로 초기화하는 것이 아닌
     새로운 값으로 덮어쓰는 방식으로 처리한다. 이 때문에 지역변수를 사용하기 위해서는 수동 초기화가 필요하다.
     인스턴스의 경우 유지 기간이 길어 비교적 생명주기가 길기 때문에 자동 초기화가 된다.)
- ex1 | 지역 변수는 초기화를 하지 않으면 사용할 수 없다.

## 초기화의 종류
- 1. 자동 초기화 : 기본값이 0으로 자동 초기화
- 2. 간단 초기화 : int sixe = 32; 혹은 Studio s = new Studio();처럼 대입 연산자를 이용한 명시적 초기화
- 3. 복잡 초기화 : 아래와 같이 초기화 블럭으로 변수를 초기화
         - Iv : 생성자를 이용한 초기화
                Display(String color, String panel, int size){
	                this.color = color;
	                this.panel = panel;
	                this.size = size;
                }
        - Cv : static{ }
                static(){
                cv = 2;
                }
- ex4 | 초기화의 종류를 알아보자.

- cv의 초기화는 클래스가 처음 로딩될 때 단 한번 이루어진다.
- iv의 초기화는 인스턴스가 생성될 때 마다 이루어진다.