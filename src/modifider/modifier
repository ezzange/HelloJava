
## 제어자 modifier (static, final, abstract)

- 클래스와 클래스의 멤버(멤버 변수, 메서드)에 부가적인 의미 부여를 한다.
- 하나의 대상에 여러 제어자를 같이 사용 가능하다. (public과 같은 접근 제어자는 반드시 하나.)

##static
- 멤버 변수와 메서드에 사용 가능하다.
- static 멤버는  인스턴스 변수와 인스턴스 메서드를 사용할 수 없다.

- 멤버 변수 : 클래스의 인스턴스 객체들이 공통적으로 사용되는 클래스 변수에 사용된다.
- 메서드 : 인스턴스(객체)를 생성하지 않아도 호출이 가능하지만 객체를 필요로 하는 static 메 서드 내에서는 인스턴스 멤버들을 직접 사용할 수 없다.
- ex1 | static 제어자를 사용할 수 있다.

##final
- 클래스와 클래스의 멤버에 사용 가능하다.
- 대표적인 final 클래스 : String, Math
- 클래스 : 변경되지 않고 확장될 수 없는 클래스로 고정되므로 부모 클래스가 될 수 없다.
- 메서드 : 변경될 수 없고 오버라이딩을 통해 재정의가 불가한 메서드로 고정된다.
- 변수(멤버 변수, 지역변수) : 값을 변경할 수 없는 상수로 고정
- ex2 | final 제어자를 사용할 수 있다.

## abstract
- 클래스와 메서드에 사용 가능하다.
- 추상 클래스는 인스턴스 생성이 불가능하다. 해당 클래스를 상속받은 자식 클래스는 추상클래스가 가진 추상 메서드의 구현부를 완성해야 한다.
- 클래스 : 추상메서드가 선언된 클래스에 사용한다.
- 메서드 : 구현부가 없는 추상메서드에 사용한다.
- ex3 | abstract 제어자를 사용할 수 있다.



## 접근 제어자 ( access modifier )
- 다른 클래스가 해당 클래스에 접근 가능 여부를 지정하는 제어자이다.
- public : 프로젝트 내 모든 클래스 접근 가능
- protected : 다른 패키지의 자식 클래스까지 접근 가능
- ( default ) : 같은 패키지 내의 외부 클래스까지 접근 가능
- private : 같은 클래스 내에서만 접근 가능
- ex4 | access modifier 접근 제어자를 사용할 수 있다.
- ex5 | 다른 클래스에서 접근 제어자에 따라 접근 제한을 확인할 수 있다.

