
## 클래스 (class)

- 객체를 정의한 객체의 설계도라고 할 수 있으며 객체를 생성하기 위해 사용한다.
- 객체가 가진 속성과 기능을 사용하려고 할 때 객체를 사용한다고 할 수 있다.
- 객체가 가진 속성을 변수라 하고 객체가 가진 기능을 메서드로 표현한다.

- 클래스는 객체를 생성하기 위한 설계도이며 객체를 생성하는 인스턴스화를 거쳐 인스턴스(객체)라고 부른다.
- 외부 클래스의 멤버를 사용하기 위해서는 객체 생성이 필요하다.
- ex1 | 외부 클래스를 인스턴스화하여 인스턴스의 객체를 사용할 수 있다.

- 하나의 소스파일에 둘 이상의 public class가 존재하면 안된다.
- 소스파일의 이름과 public class의 이름은 반드시 대 소문자까지 일치해야한다.
- Public class가 없는 경우,  소스파일의 이름은 반드시 존재하는 class의 이름과 일치하면 된다.
- Public class가 있는  경우, 소스파일의 이름은 반드시 public class의 이름과 일치해야 한다.

-인스턴스화를 거친 객체들은 배열로 만들 수 있다.
- 참조 변수 : 메모리의 주소값이 저장되는 변수로 참조 변수 배열은 객체 배열이다.
- ex2 | 객체 배열을 만들 수 있다.
- ex3 | 여러 개의 관련된 변수를 묶어 객체 배열로 다룰 수 있다.

- 클래스의 구성 멤버는 필드(Field) 생성자(Constructor) 메서드(Method) 가 있으며 생략되거나 중복 작성이 될 수 있다.

- 필드(Field) : 객체의 고유 데이터, 상태 정보, 부품 객체등 객체의 데이터가 저장되는 곳으로 클래스변수와 인스턴스 변수가 선언된다.
    - ex4 | 클래스 변수(static 변수)와 인스턴스 변수를 사용할 수 있다.
        - Iv(instance Value) 지역변수는 사용 전 수동 초기화를 반드시 해주어야 한다.

- 메서드(Method) : 값(입력)을 받아 처리하고, 결과를 반환(출력)하는 객체의 동작을 담당하는 문장이 중복되면 메서드로 묶어 사용할 수 있다.

- 생성자(Constructor) : 인스턴스 객체가 생성 시 호출 되는 인스턴스 초기화 메서드로 iv 초기화를 담당한다.
    - 생성자는 클래스 이름으로 되어 있고 반환 타입이 없으며 new 연산자로 호출된다.
    - 모든 클래스는 반드시 하나 이상의 생성자를 가져야 하며 생성자가 없는 경우 컴파일러가 매개변수가 없는 기본 생성자를 자동으로 만들어준다..
        (생성자를 작성하고 기본 생성자를 작성하지 않으면 cannot resolve symbol symbol : constructor 해당 클래스명 에러발생 => 해당 클래스의 이름을 찾을 수 없다.)
    - 매개변수가 있는 생성자의 경우 만약 생성자에서 다른 생성자를 호출할 때 자신의 클래스명이 아닌 this()를 사용하여 인스턴스 변수  초기화 힌다.
    -inheritance.ex7 | this()를 사용할 수 있다.