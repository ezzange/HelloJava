
## 추상 메서드 (abstract method)
- 구현부가 없는 미완성 메서드이다.
- 메서드 앞에는 abstract 제어자를 사용한다.
- 꼭 필요하지만 자식클래스 마다 다르게 구현될 것으로 예상되는 메서드일 경우 추상 메서드로 작성한다.

## 추상 클래스 (abstract class)
- 미완성 메서드를 갖고 있는 클래스이며 클래스 앞에는 abstract 제어자를 사용한다.
- 인스턴스를 생성할 수 없지만 해당 클래스를 상속 받은 클래스가 추상 메서드를 구현하고 인스턴스를 생성할 수 있다.
- 추상클래스의 존재로 다른 클래스들의 작성이 간편해지고 추상화된 코드는 변경에 유리하여 관리가 쉬워진다.
- 추상클래스를 사용하여 단계적으로 클래스를 만들어 모듈화할 수 있다.
- ex1 | 추상메서드를 갖고 있는 추상클래스와 추상클래스를 상속받아 추상클래스의 추상메서드를 구현한 클래스를 작성할 수 있다.
        추상클래스를 상속받고 추상메서드 일부만 구현한 클래스를 작성할 수 있다.

- 여러 클래스에서 공통적으로 사용될 수 있는 추상클래스를 바로 작성하거나 기존의 클래스들의 공통 메서드의 선언부만 추출해서 추상클래스로 만들 수 있다.
- ex2 | 공통부분을 추상클래스로 만들어 사용할 수 있다.

## 인터페이스 ( interface )

- 추상메서드의 집합.
- 추상 메서드로 이루어진 인터페이스는 구현된 것이 없어 모든 멤버는 public, abstruct 제어자를 가지고 있다. (생략 가능)
- 인터페이스의 상속은 클래스와 같이 extends 키워드를 사용하여 상속받지만 인터페이스만 가능하며, 다중 상속이 가능하다. (충돌문제가 없음)
- 인터페이스는 implements 키워드를 사용하여 클래스에서 인터페이스의 추상메서드를 구현할 수 있다.
- 인터페이스는 상수와 추상메서드, static메서드, default 메서드를 가지고 있다.
- 인터페이스를 이용하여 서로 관계없는 클래스들을 쉽게 활용할 수 있다.

- ex3 | 인터페이스를 작성할 수 있다.
- ex4 | 인터페이스를 다중 상속할 수 있다.
- ex5 | 인터페이스를 구현하는 클래스를 작성할 수 있다.


추상 클래스와 인터페이스의 차이점.
- 추상 클래스는 iv를 가질 수 있고 인터페이스는 가질 수 없다.
- 추상 클래스는 클래스 멤버 중 일부만 추상 메서드를 가지고 있어도 되지만 인터페이스의 메서드는 전부 추상메서드이다.

## 인터페이스를 이용한 다형성
- 인터페이스 부모타입의 참조변수로 인터페이스 자식타입의 인스턴스에 접근해도 구현부가 없어 충돌 나지 않아 접근이 가능하다.
- 부모타입의 참조변수로 자식타입의 인스턴스에 접근해도 부모가 선언한 메서드만 사용 가능하다.
- 인터페이스 타입 매개변수는 인터페이스를 구현한 클래스의 객체만 가능하다.
- 인터페이스는 인터페이스타입 참조변수로 자신을 구현한 자식클래스를 이용하여 인스턴스를 생성할 수 있다.
- 인터페이스를 활용하여 서로 관계없는 클래스들을 쉽게 활용할 수 있다.
- 인터페이스를 사용하면 선언부(설계)와 구현부를 분리하여 느슨한 결합을 유지한다.
( 하나의 클래스를 인터페이스 I 와 I를 상속받은 클래스B로 나누어 클래스B를 변경해도 인터페이스I의 선언부가 그대로.)

- ex6 | 인터페이스 타입의 매개변수를 이용하여 인터페이스를 구현한 객체만 받을 수 있다.
- ex7 | 인터페이스 타입의 참조변수로 자신을 구현한 클래스타입으로 인스턴스를 생성할 수 있다.
        인터페이스를 반환타입으로 자식타입의 인스턴스에 접근할 수 있다.
- ex8 | 인터페이스 매개변수를 이용하여 느슨한 결합을 만들어보자.


 디폴트 메서드 (default method)
- 인터페이스가 가질 수 있는 구현부가 있는 인스턴스 메서드
- 인터페이스에 새로운 메서드를 추가면 해당 인터페이스를 구현했던 클래스들이 일반 클래스에서 추상 클래스가 되면서 하나씩 코드를 변경해주어야 했다.
  이를 해결하기 위해 인터페이스의 원칙을 위반하는 예외가 생겼다.
- 구현부가 존재하여 다중 상속이 가능한 인터페이스는 여러 인터페이스의 디폴트 메서드간 충돌이 발생할 수 있는데 이 때
  인터페잇를 구현한 클래스에서 디폴트 메서드를 오버라이딩하면 된다.
                                    (상속 받은 부모의 메서드의 구현부만 달리하여 기존에 있는 메서드를 덮어 쓰듯 변경)

