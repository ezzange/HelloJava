
  ## 람다식 ( Lambda Expression )
    함수(메서드)를 간단한 식으로 표현하는 방법으로 익명함수라고도 한다.
    함수와 메서드의 근본적인 의미는 동일하지만 메서드는 객체지향개념 용어이기 때문에 클래스에 종속적이고 함수는 일반적 용어이기 때문에 클래스에 독립적이다.

    자바에서는 객체로 존재해야 하기 때문에 람다식 또한 익명 함수가 아닌 익명 객체(익명 클래스)이다.
    자바는 객체를 생성하고 객체가 가지고 있는 멤버(변수 혹은 메서드)를 참조변수로 사용할 수 있는데 람다식 또한 마찬가지이다.
    람다식을 다루기 위해서는 람다식의 이름이 필요한데 익명 객체인 람다식은 참조변수가 필요하다.
    만약 참조변수의 타입이 Object라면 Object는 람다식의 함수식이 없기 떄문에 Object타입의 참조변수로 람다식의 함수를 참조할 수 없고,
    람다식의 함수식을 작성한 함수형 인터페이스를 이용하면 매개변수 개수와 반환타입이 일치할 경우 함수형 인터페이스 타입의 참조변수로 람다식을 참조할 수 있다.

  람다식 작성 방법
    1. 메서드의 이름과 반환타입을 제거하고 -> 키워드를 블록 {} 앞에 추가한다.
    2. 반환값이 있는 경우 식과 값만 적고 return ;을 생략한다.
    3. 매개변수의 타입이 추론 가능하면 생략한다.
    4. 매개변수가 하나일 경우 괄호()를 생략한다.
    5. 블록 안에 문장이 하나일 경우 중괄호{}와 문장끝의 ';'를 생략한다. (하나뿐인 문장이 return문일 경우 제외)
 ex1 | 람다식을 직접 작성해보자.

  함수형 인터페이스
  - 단 하나의 추상 메서드만 선언된 인터페이스
  - 함수형 인터페이스에 람다식을 작성하여 람다식에 이름을 붙여주고 해당 함수형 인터페이스의 이름으로 람다식을 호출할 수 있다.
    이 경우 함수형 인터페이스 타입의 매개변수 혹은 반환타입에서 람다식을 호출하여 람다식을 사용하거나 직접 넣어 사용할 수 있다.
        매개변수의 경우 : 함수형 인터페이스의 매개변수를 람다식으로 받을 수 있다.
        반환타입의 경우 : 메서드의 반환타입으로 함수형 인터페이스타입을 작성하여 람다식을 반환힐 수 있다.
 ex2 | 함수형 인터페이스를 이용하여 람다식을 작성해보자.

  java.util.function 패키지
  자주 사용되는 다양한 함수형 인터페이스를 제공한다.
    매개변수가 하나인 함수형 인터페이스
        Runnable          | void run()         |  매개변수 X 반환값 X
        Supplier<T>       | T get()            |  매개변수 X 반환값 O  => 공급자
        Consumer<T>       | void accept()      |  매개변수 O 반환값 X  => 소비자
        Function<T,R>     | R apply(T t)       |  매개변수 O 반환값 O  => 함수
        Predicate<T>      | boolean test(T t)  |  매개변수 O 반환값 O (boolean)  => 조건식
            ( and(),or(),negate()를 사용하여 두 개의 Predicate를 하나로 결합이 가능하다. )
            ( 두 개의 Predicate를 등가 비교 시 isEqual() 사용할 수 있다. )
 ex3 | 함수형 인터페이스를 직접 사용해보자.
    매개변수가 두개인 함수형 인터페이스
        BiConsumer<T,U>   | void accept(T t, U u)
        BiFunction<T,R>   | R apply(T t, U u)
        BiPredicate<T>    | boolean test(T t, U u)
    매개변수의 타입과 반환타입이 일치하는 함수형 인터페이스
        UnaryOperator<T>  | T apply(T t)       |  단항 연산자
        BinaryOperator<T> | T apply(T t, T t)  |  이항 연산자
 ex3 | 직접 유틸 펑션 패키지의 메서드를 사용해보자.

  컬렉션 프레임워크와 함수형 인터페이스
  함수형 인터페이스를 사용하는 컬렉션 프레임워크의 메서드 (와일드 카드 생략)
  Collection | boolean removevelf(Predicate<T> filter)          | 조건에 맞는 요소를 삭제
  List       | void replaceAll(UnaryOperator<T> operator)       | 모든 요소를 변환하여 대체
  Iterable   | void forEach(Consumer<T> action)                 | 모든 요소에 작업을 수행
  Map        | V compute(K key, BiFunction<K,V,V> f)            | 지정된 키의 값에 f를 수행
  Map        | V computeIfAbsent(K key, Function<K,V> f)        | 키가 없으면 f를 수행 후 추가
  Map        | V computeIfPresent(K key, BiFunction<K,V,V> f)   | 지정된 키가 있을 때 f를 수행
             | V marge((K key, V value, BiFunction<V,V,V> f)    | 모든 요소에 병합 작업 f 수행
             | void forEach(BiConsumer<K,V> action)             | 모든 요소에 action 수행
             | void replaceAll(BiFuntion<K,V,V> f)              | 모든 요소에 치환 작업 f 수행

  메서드 참조 ( method reference )
  하나의 메서드만 호출하는 람다식은 '메서드 참조'로 간단하게 사용할 수 있다.
    1. static 메서드 참조
        (x) -> ClassName.method(x) => ClassName::method
    2. 인스턴스 메서드 참조
        (obj, x) -> obj.method(x)  => ClassName::method
  생성자의 메서드 참조
    1. 생성자의 메개변수가 없는 경우
        new ClassName()         => ClassName::new
    2. 생성자의 매개변수가 있는 경우
        (i) -> new ClassName(i) => ClassName::new
        배열) x -> new int[x]    => int[]::new
 ex6 | 메서드 참조로 간단하게 표현해보자.