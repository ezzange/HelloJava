
 ## collection Framework
 - 다수의 많은 Data 객체를 다루기 위한 표준화된 프로그래밍

  collection class
  - 다수의 데이터를 저장할 수 있는 클래스 ( ex- vector,ArrayList, HashSet )

    collection interface
     ## List
        순서 보장, 중복 허용 (데이터의 명단)
        ### List 인터페이스를 구현한 클래스
             ArrayList
                => 배열에 데이터를 저장하는 클래스로 크기 변경이 어렵고 중간 데이터의 변경이 비교적 느리다.
                   하지만 객체의 주소와 인덱스 위치로 데이터에 접근 속도가 빠르고 끝의 데이터 변경은 빠르다.
                => Stack(LIFO 후입선출 구조)인터페이스를 구현한 클래스 이다.
                    (stack Method)
                        - 반환값이 없으면 에러 발생하는 메서드
                            peek(), pop()
                        - 반환값이 없으면 null 혹은 false 반환
                            empty(), push(), search()
              ex |  ArrayList 를 직접 작성해보자.
             LinkedList
                => 객체 주소값이 저장되는 노드는 자신의 앞 주소를 저장하여 연결 리스트라고 한다.
                   중간 데이터의 변경이 빨라 비순차적인 데이터를 저장하기 적합하다.
                   하지만 전체적으로 봤을 때 하나의 데이터의 접근하기 위해 객체 주소와 이전 노드를 확인하고 넘어가 데이터에 접근 속도는 느리다.
                => Queue(FIFO 선입선출 구조)인터페이스를 구현한 클래스 이다.
                    (queue Method)
                        - 반환값이 없으면 에러 발생하는 메서드
                            peek(), pop()
                        - 반환값이 없으면 null 혹은 false 반환
                            empty(), push(), search()


      ### Set
        순서, 중복 X (데이터의 집합)
        Set 인터페이스를 구현한 클래스
            - HashSet
                => Set 인터페이스를 구현한 대표적인 컬렉션 클래스
                => 저장할 때 객체의 equals와 hashCode() 호출하여 기존의 같은 객체가 있는지 확인하고 없으면 저장한다. => 중복 X
                                -> equals와 hashCode() 오버라이딩 되어야 중복 저장을 안한다.
                (Hashset Method)
                    생성자 : hashset()
                    추가 : add()
                    합집합 : addAll()
                    교집합 : removeAll()
                    삭제 : remove()
                    조건부 삭제 : retainAll()
                    전체 삭제 : clear()
                    이 외 isEmpty() size() toArray() contains() containsAll90 iterator()...
     - ex | equals와 hashCode() 오버라이딩하여 hashSet 객체를 생성해보자 - person
            - LinkedHashSet
                => 순서 유지가 가능한 hashSet
            - TreeSet
                => 이진 탐색 트리. 이진 트리의 모든 노드를 한 번씩 읽는 것을 트리 순회라 하며 중위 순회하면 오름차순으로 정렬된다.
                => 범위 검색, 정렬에 유리한 컬렉션 클래스이며 모든 tree노드가 최대 2개의 하위 노드를 갖고 있다.
                => 데이터가 많아 질수록 비교 횟수가 증가해 데이터 추가, 삭제에 오래 걸린다.
                => 객체를 저장할 때 compare() 호출하여 비교 한다.
                    (TreeSet Method)
                        생성자 : TreeSet()
                        최솟값 : first()
                        최댓값 : last()
                        올림 : ceiling()
                        버림 : floor()
                        보다 큰 : higher()
                        보다 작은값 : lower()
                        범위 사이 값 반환 : subSet()
                        기준값 보다 큰 : tailSet()
                        기준값 보다 작은 : headSet()
             ex | treeSet을 정렬하고 비교해보자.
             ex | treeSet 클래스의 메서드를 사용해보자.


    ## map interface
     ## Map
        key(순서, 중복 X) : Value(순서 X, 중복 O)
        데이터를 [키와 벨류]쌍으로 저장한다.
        Map 인터페이스를 구현한 클래스
            - HashMap
                => Map 인터페이스를 구현한 대표적인 컬렉션 클래스
                => 동기화가 되어 있지 않다.
                => hashing 기법으로 데이터를 저장하여 데이터가 많아도 검색이 빠르다.
                    (TreeSet Method)
                        생성자 : HashMap(), initial()
                        저장 : put(), putAll()
                        삭제 : remove()
                        변경 : replace()
                        읽기 : keySet(), values(), entrySet()
                        반환 :  get(), getOrDefault(), containsKey(), containsValue()
                        그 외 size(), isEmpty(), clear(), clone()
    - ex | hashMap을 작성 할 수 있다.
    - ex | hashMapTest2 -new Integer => valueOf
            - LinkedHashMap
                => 순서를 유지할 수 있는 연결된 hashMap
            -TreeMap : TreeSet과 마찬가지로 이진 탐색 트리.

 hashing 기법
   데이터를 hashtable(array + linkedList)에 저장한다.
   키로 해시함수를 호출해서 헤시코드를 얻어 해시함수의 반환값에 대응하는 링크드리스트를 배열에서 찾고 해당 링크드리스트에서 키와 일치하는 데이터를 찾는다.
   여기서 해시함수는 같은 키에 항상 같은 해시코드를 반환하는데 서로 다른 키라도 같은 값의 해시코드를 반환할 수 있다.(해시함수 :  key => 같은 키값의 다른 벨류값)

 # Collections Class
    컬렉션을 위한 유용한 메서드를 제공하는 클래스
        컬렉션 채우기 : fill(), copy(), sort(), binarySerach()
        컬렉션 동기화 : synchronized()
        변경 불가(read only) 컬렉션 만들기 : unmodifiableXXX()
        싱글톤 컬렉션 만들기 : singletonXXX()
        한 종류의  타입만 저장하는 컬렉션 : checkedXXX()
 ex | Collections 클래스를 직접 작성해보자.
  ## Iterator, ListIterator, Enumeration Interface
  - 컬렉션에 저장된 데이터를 접근하는데 사용하는 인터페이스로 일회용짜리의 읽기 전용이다.

  ## Arrays
  배열을 다루기 편리한 메서드를 제공하는 클래스
  - 출력 : toString()
  - 복사 : copyOf(), copyOfRange()
  - 채움 : fill(), setAll(람다식)
  - 정렬 : sort()
  - 이진 탐색 : binarySearch() - 정렬 필수
- ex | Arrays클래스의 메서드를 직접 써보자
  ## Comparator, Comparable
  객체 정렬애 팔요한 메서드(정렬 기준 제공)를 정의한 인터페이스
  Comparable : 기본 정렬 기준을 제공해 주는데 주어진 두 객체를 비교한다. (A와 B를 비교한다면 값을 사전 기준으로 A가 크면 1, 같다면 0, B가 크다면 -1)
  Comparator : 주어진 객체를 자신과 비교
- ex |
   compare() compareTo()
   - 두 객체의 비교 결과를 반환(사전 기준 왼쪽이 크면 -1 같으면 0 오른쪽이 크면 1)
- ex | integer 와 Comparable()르
- ex | integer 와 Comparable 로 버블정렬