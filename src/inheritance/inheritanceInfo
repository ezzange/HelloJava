##상속 (Inheritance)

- 클래스를 확장 하여 사용 하기 위해 사용한다.
- 기존의 클래스와 새로운 클래스를 부모와 자식 으로(상속 관계)로 이어 새로운 클래스에서 기존의 클래스 코드를 재사용할 수 있다.
- 자식 클래스는 부모 클래스의 모든 멤버를 상속 받아 부모의 멤버를 사용할 수 있어 자식의 멤버는 부모 클래스보다 적을 수 없다.
- 부모 클래스는 자식 클래스의 변경에 영향을 받지 않는다.
- Class 의 경우 extends 키워드를 사용 하여 기존 클래스를 상속 받을 수 있다.
- 단일 상속 만을 허용한다.(-> 필요 하다면 하나의 클래스를 상속 하고 나머지는 포함 관계를 이용 한다.)
- 모든 클래스는 컴파일 시 컴파일러에 의하여 Object클래스를 자동적으로 상속 받아 Object클래스의 메서드를 사용할 수 있다.
  (toString, equals(Object object), hashCode(), ...)

- ex1 | Child는 Parent를 상속받아 Parent의 멤버를 사용할 수 있다.
- ex2 | Point3D는 point를 상속 받아 point의 멤버를 사용할 수 있다.
- ex3 | 자식클래스만 생성하여 자식클래스가 상속받은 부모의 멤버를 사용할 수 있다.
- ex4 | 클래스에서 Object의 메서드를 사용할 수 있다.

##  참조변수

- 객체를 가리키기 위해 사용되는 변수로 Java에서 객체는 힙(heap) 메모리에 할당되고, 해당 객체에 접근하려면 참조 변수를 사용한다.
- 참조 변수는 실제로 객체 자체가 아닌, 힙 메모리에 위치한 객체를 가리키는 주소 값을 저장하여 이 주소 값은 객체의 데이터와 메서드에 대한 접근을 가능하다.

##참조변수 super
- 객체 자신을 가리키는 참조변수이다.
- 자식 클래스가 자신의 멤버 이름과 상속 받은 부모 클래스의 멤버 이름이 같을 경우,
    자신의 멤버는 this.변수명 부모의 멤버는 super.변수명 으로 구별할 수 있다.
- 만일 부모클래스에만 존재하는 변수명을 참조변수super와 this를 사용하면 상속받은 멤버는 자식클래스의 멤버임으로 super와 this는 같은 값을 가르킨다.
- 객채 자신을 가리키는 참조변수로 인스턴스 메서드에 존재하고 static메서드에는 존재할 수 없다.


- ex5 | 이름이 같은 자식의 멤버와 부모의 멤버를 참조변수super와 this를 사용하여 구분할 수 있다.

//생성자 super()
- 자식 클래스의 생성자는 자식클래스가 선언한 멤버만 선언해야 한다.
- 자식 클래스의 생성자에서 부모클래스의 멤버를 초기화할 때 부모의 생성자를 호출하여 초기화한다.
- 모든 생성자 첫 줄에는 반드시 다른 생성자( this(), super() )를 호출 한다.
    그렇지 않으면 컴파일 에러가 발생하기 때문에 컴파일 시 컴파일러가 자동으로 넣어 준다.

    => 기본 생성자는 컴파일러가 자동으로 주입해주는데 기본 생성자가 아닌 다른 생성자를 작성해줄 때 기본 생성자를 같이 만들어주지 않으면 컴파일 에러 발생

- ex6 | 자식클래스에서 생성자 super()를 사용하여 부모클래스의 멤버를 초기화한다.
  ex7 | 생성자 작성시 첫줄에 this()혹은 super() 생성자를 호출하여 작성할 수 있다.